%{
#include "defs.h"
#define YYSTYPE Cell *
%}
%token  STROKE FILL DISPLAY PERIOD
        RECTANGLE LINE ARC STRING IMAGE
        START END PASS ANGLE SWEEP AT
        COLOR WIDTH INTEGER ATMARK WQUOTED
        RED GREEN BLUE CYAN MAGENTA YELLOW GRAY BLACK WHITE
        UNKNOWN;
%%
Program
        : Statements                            
            { $$ = $1; }
Statements
        : Statement                             
            { $$ = $1; tree($$); }
        | Statements Statement                  
            { $$ = $2; tree($$); }
Statement
        : STROKE RECTANGLE RectangleAttributes PERIOD
            { $$ = node("STROKE", $3); }
        | FILL RECTANGLE RectangleAttributes PERIOD
            { $$ = node("FILL", $3); }
        | STROKE LINE LineAttributes PERIOD
            { $$ = node("STROKE", $3); }
        | FILL LINE LineAttributes PERIOD
            { $$ = node("FILL", $3); }
        | STROKE ARC ArcAttributes PERIOD
            { $$ = node("STROKE", $3); }
        | FILL ARC ArcAttributes PERIOD
            { $$ = node("FILL", $3); }
        | DISPLAY STRING StringAttributes PERIOD
            { $$ = node("DISPLAY", $3); }
        | DISPLAY IMAGE ImageAttributes PERIOD
            { $$ = node("DISPLAY", $3); }
RectangleAttributes
        : StartPoint EndPoint ColorAndThickness
            { $$ = node("RECTANGLE", cons(cons($1, $2), $3)); }
LineAttributes
        : StartPoint PassPoints EndPoint ColorAndThickness
            { $$ = node("LINE", cons(cons($1, cons($2, $3)), $4)); }
ArcAttributes
        : StartPoint EndPoint Angle Sweep ColorAndThickness
            { $$ = node("ARC", cons(cons(cons($1, $2), cons($3, $4)), $5)); }
StringAttributes
        : AtPoint Wquoted
            { $$ = node("STRING", cons($1, $2)); }
ImageAttributes
        : AtPoint Wquoted
            { $$ = node("IMAGE", cons($1, $2)); }
StartPoint
        : START Coordinate
            { $$ = node("START", $2); }
PassPoints
        : PassPoint
            { $$ = $1;}
        | PassPoints PassPoint
            { $$ = cons($1, $2); }
PassPoint
        : PASS Coordinate 
            { $$ = node("PASS", $2); }
EndPoint
        : END Coordinate
            { $$ = node("END", $2); }
Angle
        : ANGLE Integer
            { $$ = node("ANGLE", $2); }
Sweep
        : SWEEP Integer
            { $$ = node("SWEEP", $2); }
AtPoint
        : AT Coordinate
            { $$ = node("AT", $2); }
ColorAndThickness
        : Color
            { $$ = node("COW", $1); }
        | Color Width
            { $$ = node("COW", cons($1, $2)); }
        | Width
            { $$ = node("COW", $1); }
        | Width Color
            { $$ = node("COW", cons($1, $2)); }
Color
        : COLOR RED
            { $$ = leaf("COLOR", yytext); }
        | COLOR GREEN
            { $$ = leaf("COLOR", yytext); }
        | COLOR BLUE
            { $$ = leaf("COLOR", yytext); }
        | COLOR CYAN
            { $$ = leaf("COLOR", yytext); }
        | COLOR MAGENTA
            { $$ = leaf("COLOR", yytext); }
        | COLOR YELLOW
            { $$ = leaf("COLOR", yytext); }
        | COLOR GRAY
            { $$ = leaf("COLOR", yytext); }
        | COLOR BLACK
            { $$ = leaf("COLOR", yytext); }
        | COLOR WHITE
            { $$ = leaf("COLOR", yytext); }
Width   
        : WIDTH Integer
            { $$ = $2; }
Coordinate
        : Integer ATMARK Integer
            { $$ = node("XY", cons($1, $3)); }
Integer
        : INTEGER
            { $$ = leaf("INTEGER", yytext); }
Wquoted
        : WQUOTED
            { $$ = leaf("WQUOTED", yytext); }
%%
#include "lex.yy.c"
void yyerror(char *s) {
	fprintf(stderr, "\n%s at %d: nearby \"%s\"\n\n", s, linecounter, yytext);
	exit(EXIT_FAILURE);
}
